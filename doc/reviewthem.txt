*reviewthem.txt*	A Neovim plugin for streamlining code reviews

Author:  Kenta Yamaguchi
License: MIT

==============================================================================
CONTENTS                                                    *reviewthem-contents*

    1. Introduction ......................... |reviewthem-introduction|
    2. Requirements ......................... |reviewthem-requirements|
    3. Installation ......................... |reviewthem-installation|
    4. Setup ................................ |reviewthem-setup|
    5. Commands ............................. |reviewthem-commands|
    6. Mappings ............................. |reviewthem-mappings|
    7. Configuration ........................ |reviewthem-configuration|
    8. Usage ................................ |reviewthem-usage|
    9. Health Check ......................... |reviewthem-health|

==============================================================================
1. INTRODUCTION                                         *reviewthem-introduction*

reviewthem.nvim is a Neovim plugin designed to streamline code reviews within
your editor. It allows you to:

- Start review sessions between branches or commits
- Add comments to specific lines or ranges
- Mark files as reviewed
- View review status and progress
- Export review comments in various formats

==============================================================================
2. REQUIREMENTS                                         *reviewthem-requirements*

- Neovim >= 0.7.0
- Git
- At least one of the following diff tools:
  - diffview.nvim (optional)
  - alt-diffview (optional)
- telescope.nvim (optional, for enhanced UI)
- plenary.nvim (optional, recommended)

==============================================================================
3. INSTALLATION                                         *reviewthem-installation*

Using lazy.nvim: >lua

    {
      "KEY60228/reviewthem.nvim",
      dependencies = {
        "sindrets/diffview.nvim", -- optional (need at least one diff tool)
        "KEY60228/alt-diffview", -- alternative diff tool
        "nvim-telescope/telescope.nvim", -- optional
      },
      config = function()
        require("reviewthem").setup({
          -- your configuration
        })
      end,
    }
<

Using packer.nvim: >lua

    use {
      "KEY60228/reviewthem.nvim",
      requires = {
        "sindrets/diffview.nvim", -- optional (need at least one diff tool)
        "KEY60228/alt-diffview", -- alternative diff tool
        "nvim-telescope/telescope.nvim", -- optional
      },
      config = function()
        require("reviewthem").setup({
          -- your configuration
        })
      end,
    }
<

==============================================================================
4. SETUP                                                       *reviewthem-setup*

Call the setup function with your configuration: >lua

    require("reviewthem").setup({
      diff_tool = "diffview",
      comment_sign = "ðŸ’¬",
      submit_format = "markdown",
      submit_destination = "clipboard",
      ui = "telescope", -- or "builtin"
      keymaps = {
        start_review = "<leader>rtstart",
        add_comment = "<leader>rtc",
        submit_review = "<leader>rtsubmit",
        abort_review = "<leader>rtabort",
        show_comments = "<leader>rtsc",
        toggle_reviewed = "<leader>rtmr",
        show_status = "<leader>rtrs",
      },
    })
<

==============================================================================
5. COMMANDS                                                 *reviewthem-commands*

                                                            *:ReviewThemStart*
:ReviewThemStart [{base}] [{compare}]
    Start a review session. If no arguments provided, compares HEAD with
    working directory. If only {base} provided, compares {base} with working
    directory. If both provided, compares {base} with {compare}.

                                                        *:ReviewThemAddComment*
:ReviewThemAddComment
    Add a comment to the current line. In visual mode, adds comment to the
    selected range.

:[range]ReviewThemAddComment
    Add a comment to the specified line range.

                                                           *:ReviewThemSubmit*
:ReviewThemSubmit
    Submit all review comments. Output format and destination are determined
    by configuration.

                                                            *:ReviewThemAbort*
:ReviewThemAbort
    Abort the current review session. Prompts for confirmation if there are
    unsaved comments.

                                                      *:ReviewThemShowComments*
:ReviewThemShowComments
    Display all comments for the current review session.

                                                   *:ReviewThemMarkAsReviewed*
:ReviewThemMarkAsReviewed
    Mark the current file as reviewed.

                                                 *:ReviewThemUnmarkAsReviewed*
:ReviewThemUnmarkAsReviewed
    Unmark the current file as reviewed.

                                                   *:ReviewThemToggleReviewed*
:ReviewThemToggleReviewed
    Toggle the reviewed status of the current file.

                                                           *:ReviewThemStatus*
:ReviewThemStatus
    Show the review status of all files, including which files have been
    reviewed and the total number of comments.

==============================================================================
6. MAPPINGS                                                 *reviewthem-mappings*

Default mappings (can be customized in setup):

    <leader>rtstart  - Start a review session
    <leader>rtc      - Add a comment (works in normal and visual mode)
    <leader>rtsubmit - Submit review
    <leader>rtabort  - Abort review
    <leader>rtsc     - Show all comments
    <leader>rtmr     - Toggle file reviewed status
    <leader>rtrs     - Show review status

In the review status window (builtin UI):
    t               - Toggle reviewed status of the file under cursor
    q or <Esc>      - Close the window

In the review status window (telescope UI):
    <C-t>           - Toggle reviewed status of the selected file

==============================================================================
7. CONFIGURATION                                       *reviewthem-configuration*

Available configuration options:

diff_tool~
    Default: "diffview"
    The diff tool to use. Options: "diffview" or "alt-diffview".

    Note: When comparing a specific ref with the working tree (e.g.,
    :ReviewThemStart main), we recommend using "alt-diffview" as it handles
    untracked files more reliably in this scenario. diffview.nvim may not
    properly display untracked files when comparing with the working tree.

comment_sign~
    Default: "ðŸ’¬"
    The sign to display in the gutter for lines with comments.

submit_format~
    Default: "markdown"
    Format for submitted reviews. Options: "markdown" or "json".

submit_destination~
    Default: "clipboard"
    Where to send the review output. Options: "clipboard" or a file path
    relative to the project root.

ui~
    Default: "builtin"
    UI provider to use. Options: "builtin" or "telescope".

keymaps~
    Default: See |reviewthem-mappings|
    Table of keymap configurations. Set any to nil to disable.

command_aliases~
    Default: { review_start = "rts" }
    Command abbreviations. For example, typing ":rts" expands to ":ReviewThemStart".

==============================================================================
8. USAGE                                                       *reviewthem-usage*

Basic workflow:

1. Start a review session: >
    :ReviewThemStart main feature-branch
<
2. Navigate through the diff using your diff tool (e.g., diffview)

3. Add comments to lines or ranges: >
    :ReviewThemAddComment
    " or select lines in visual mode and press <leader>rtc
<
4. Mark files as reviewed: >
    :ReviewThemToggleReviewed
<
5. Check review progress: >
    :ReviewThemStatus
<
6. Submit your review: >
    :ReviewThemSubmit
<

Example: Reviewing uncommitted changes: >
    :ReviewThemStart
<
This compares HEAD with your working directory.

Example: Reviewing a PR: >
    :ReviewThemStart main feature/new-feature
<

==============================================================================
9. HEALTH CHECK                                             *reviewthem-health*

Run the health check to diagnose issues: >
    :checkhealth reviewthem
<

This will verify:
- Neovim version compatibility
- Git installation
- Required and optional dependencies
- Configuration validity
- Clipboard support

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
